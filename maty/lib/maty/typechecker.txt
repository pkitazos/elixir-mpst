-- Val  # 10
-- Type # int
-- ST   # P!l(int)
-- Expr # let x = P!l(10) ; return ()
^ this is an expression which has sequencing `;` a send operation `P!l(10)` and a function call (?) with `return ()`

tcVal :: Env -> Val -> Maybe Type

tcExpr :: Env -> ST -> Expr -> Maybe Type x ST



 let x = send msg(10) to P ; return ()



Implement a type checker !! Essentially I'll provide an AST (I think) to my typechecker which must implement all the typing rules defined in the Maty paper

No parser needed
No semantics needed