defmodule TwoBuyer.Participants.Buyer1 do
  alias Maty.Logger
  use Maty.Actor

  @role :buyer1

  # local session type annotation
  # here we would have a bunch of session type annotations for all the handlers
  # initially I will cut these up manually because who tf knows how this works
  # but obviously later on these will be auto-generated by scribble or whatever
  # @sessionType("quote_handler", :seller, "&quote(float) . buyer2+share(amount)")
  # something like this but yk, good

  @impl true
  def init_actor({ap_pid, title}) do
    initial_state = %{sessions: %{}, callbacks: %{}}

    register(
      ap_pid,
      @role,
      # this may need to change as well because the session has to know who you are acting as here
      # or well, whenever I invoke this callback, I need to pass in role_me into the session context
      fn {session_id, role_me}, state ->
        maty_send({state.sessions[session_id], role_me}, :seller, {:title, title})
        {:suspend, {&__MODULE__.quote_handler/4, :seller}, state}
      end,
      initial_state
    )
  end

  # ------------------------------------------------------------------

  # the role gets passed to the handler from the event loop as a tuple initially, later this can be added to the session context

  # problem solved! we have access to role_me in the session context
  # which means the maty_send also has access to it
  # @handlerType "quote_handler"
  def quote_handler({:quote, amount}, :seller, {session, role_me}, state) do
    share_amount = amount / 2
    log(:quote_handler, "Received quote=#{amount}, sending share=#{share_amount} to Buyer2")
    log(:quote_handler, "Suspending with 'decision_handler'")

    # [re: ST] Let's say I want to typecheck this function
    # I can assume that this function has been annotated with a precondition ST (see handlerType)
    # then I use my haskell tc functions to check if this funciton based on its AST typechecks
    # if it does, we good and go on to the next funciton
    # I'm basically type-checking stuff like:
    # - am I permitted to send based on my curr session type
    # - check that my message type, message recipient, etc. all match my ST
    # - check that my funciton return type is okay (return type or suspend or whatever)

    # I've explicitly destructured this here, but eventually want to hide this from the user
    # we could have it be something like session.current_role or something, API tbd
    maty_send({session, role_me}, :buyer2, {:share, share_amount})

    # [re: ST]
    # a) am I done
    # b) if not am I in a point where I can suspend
    {:done, :unit, state}
  end

  # -----------------------------------------------------------------

  defp log(handler, msg), do: Logger.log(@role, handler, msg)
end
